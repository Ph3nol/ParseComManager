{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"ParseComManager","google":"","tagline":"Manage API queries to Parse.com cloud service.","body":"# ParseComManager\r\n\r\nManage API queries to Parse.com cloud service.\r\n\r\n[![Continuous Integration status](https://secure.travis-ci.org/Ph3nol/ParseComManager.png)](http://travis-ci.org/Ph3nol/ParseComManager)\r\n\r\n## Requirements\r\n\r\n* PHP 5.3+\r\n* PHP Curl extension\r\n\r\n## Installation\r\n\r\n### Add to your project Composer packages\r\n\r\nJust add `sly/parsecom-manager` package to the requirements of your Composer JSON configuration file,\r\nand run `php composer.phar install` to install it.\r\n\r\n### Install from GitHub\r\n\r\nClone this library from Git with `git clone https://github.com/Ph3nol/ParseComManager.git`.\r\n\r\nGoto to the library directory, get Composer phar package and install vendors:\r\n\r\n```\r\ncurl -s https://getcomposer.org/installer | php\r\nphp composer.phar install\r\n```\r\n\r\nYou're ready to go.\r\n\r\n## Usage\r\n\r\n``` php\r\n<?php\r\n\r\nrequire_once '/path/to/vendor/autoload.php';\r\n\r\nuse Sly\\ParseComManager\\Manager\\Manager;\r\nuse Sly\\ParseComManager\\Query\\Query;\r\n\r\n/**\r\n * Initialize the manager with your application ID and REST API key.\r\n */\r\n$manager = new Manager(array(\r\n    'appID'        => 'XXXXX',\r\n    'masterKey'    => 'XXXXX',\r\n    'apiKey'       => 'XXXXX',\r\n    'sessionToken' => null, // Optional session token\r\n));\r\n\r\n/**\r\n * Initialize the query with 'login' API part parameters.\r\n *\r\n * Some API parameters are defined into the library:\r\n * Resources/config/api.yml\r\n *\r\n * You can add yours or overload base ones with declaring\r\n * your YAML file path as second argument:\r\n * $query = new Query('login', '/path/to/your/api.yml');\r\n */\r\n$query = new Query('login');\r\n\r\n/**\r\n * Add some properties, required by Parse.com REST API.\r\n */\r\n$query->addProperties(array(\r\n    'username' => 'Chuck',\r\n    'password' => 'n0rr1s',\r\n));\r\n\r\n// or/and $query->addProperty('specificProperty', 'propertyValue');\r\n\r\n/**\r\n * Get API JSON response.\r\n * \r\n * You can use 'client' second argument to get the client response.\r\n * Example: $clientResponse = $manager->execute($query, 'client');\r\n */\r\n$userFromApi = $manager->execute($query);\r\n\r\n```\r\n\r\n## YAML API config file\r\n\r\nYou can use your own YAML API config file. Here is an example:\r\n\r\n``` yaml\r\nsignup:\r\n    method: post\r\n    url: /login\r\n\r\nlogin:\r\n    method: get\r\n    url: /login\r\n\r\nretrieveUser:\r\n    method: get\r\n    url: /users/%userKey%\r\n\r\n# ...\r\n```\r\n\r\nBe careful: URLs are relative ones.\r\nBase one is declared as `Sly\\ParseComManager\\Query\\Query::API_BASE_URL` constant.\r\n\r\nYou can use keys into a URL, like retrieveUser '%userKey%' case.\r\nJust set a 'userKey' property to your query, as usual, it will be replaced\r\nin your URL.\r\n\r\n## Test with Atoum\r\n\r\nThis library is using [Atoum](https://github.com/atoum/atoum) for unit testing,\r\nwhose Composer package can be installed with `dev` mode:\r\n\r\n```\r\nphp composer install --dev\r\n./atoum -d tests/units\r\n```\r\n"}